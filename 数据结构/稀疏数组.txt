package gjb.study.sparseArry;

public class SparseArray {

	public static void main(String[] args) {
		// 创建一个原始的二维数组11*11
		// 0:没有棋子 1：黑棋 2：蓝棋子
		int chessArr1[][] = new int[11][11]; // 创建棋盘
		chessArr1[1][2] = 1;
		chessArr1[2][3] = 2;
		chessArr1[2][5] = 1;
		
		//输出原始二维数组
		for(int[] row:chessArr1){
			for(int data:row){
				System.out.printf("%d\t",data);
			}
			System.out.println();
		}
		
		//创建稀疏数组，记录原始数组中的非0数据
		//获取原始数组中的非0数据的个数
		int sum = 0;
		for(int i=0;i<11;i++){
			for(int j=0;j<11;j++){
				if(chessArr1[i][j]!=0){
					sum++;
				}
			}
		}
		//创建稀疏数组          x（总长度） x（总长度） x（有数据）
 		int sparseArr[][] = new int[sum+1][3];
		sparseArr[0][0] = 11;
		sparseArr[0][1] = 11;
		sparseArr[0][2] = sum;
		System.out.println("-----------创建稀疏数组-------------");
		//给稀疏数组赋值
		int count =1;
		for(int i =0;i<11;i++){
			for(int j =0;j<11;j++){
				if(chessArr1[i][j]!=0){
					sparseArr[count][0]=i;
					sparseArr[count][1]=j;
					sparseArr[count][2]=chessArr1[i][j];
					count++;
				}
			}
		}
		//输出稀疏数组
		for(int[] sp:sparseArr){
			for(int spd:sp){
				System.out.printf("%d\t",spd);
			}
			System.out.println();
		}
		
		//将稀疏数组恢复成原始数组
		/**
		 * 根据稀疏数组的第一行，创建原始的二维数组
		 * 在读取稀疏数组后几行的数据并且赋值给原始数组
		 */
		int chessArray2[][] = new int[sparseArr[0][0]][sparseArr[0][1]];
		
		//从稀疏数组第二行开始读取数据
		for(int i=1;i<sparseArr.length;i++){
			chessArray2[sparseArr[i][0]][sparseArr[i][1]]=sparseArr[i][2];
		}
		
		System.out.println("-----------输出还原后的数组------------");
		for(int[] row:chessArray2){
			for(int data:row){
				System.out.printf("%d\t",data);
			}
			System.out.println();
		}
		
		
		
		
		
		
		
		
		
		
		
	}

}
